package com.hedylogos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.hedylogos.bean.Message;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table MESSAGE.
 */
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MsgId = new Property(0, Long.class, "msgId", true, "MSG_ID");
        public final static Property Sender = new Property(1, Long.class, "sender", false, "SENDER");
        public final static Property Receiver = new Property(2, Long.class, "receiver", false, "RECEIVER");
        public final static Property Contents = new Property(3, String.class, "contents", false, "CONTENTS");
        public final static Property Timestamp = new Property(4, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Conversation = new Property(5, String.class, "conversation", false, "CONVERSATION");
        public final static Property Type = new Property(6, Integer.class, "type", false, "TYPE");
    };


    public MessageDao(DaoConfig config) {
        super(config);
    }

    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE' (" + //
                "'MSG_ID' INTEGER PRIMARY KEY ," + // 0: msgId
                "'SENDER' INTEGER," + // 1: sender
                "'RECEIVER' INTEGER," + // 2: receiver
                "'CONTENTS' TEXT," + // 3: contents
                "'TIMESTAMP' INTEGER," + // 4: timestamp
                "'CONVERSATION' TEXT," + // 5: conversation
                "'TYPE' INTEGER);"); // 6: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();

        Long msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindLong(1, msgId);
        }

        Long sender = entity.getSender();
        if (sender != null) {
            stmt.bindLong(2, sender);
        }

        Long receiver = entity.getReceiver();
        if (receiver != null) {
            stmt.bindLong(3, receiver);
        }

        String contents = entity.getContents();
        if (contents != null) {
            stmt.bindString(4, contents);
        }

        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(5, timestamp);
        }

        String conversation = entity.getConversation();
        if (conversation != null) {
            stmt.bindString(6, conversation);
        }

        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(7, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // msgId
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // sender
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // receiver
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contents
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // timestamp
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // conversation
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // type
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setMsgId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSender(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setReceiver(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setContents(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimestamp(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setConversation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setMsgId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getMsgId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}